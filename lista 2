
S <- 1000
set.seed(123)
Y_s <- rnorm(S, mean = 1, sd = sqrt(3))

RSS_Ys <- sum((Y_s - mean(Y_s))^2)

#====================================== M10k ======================================

M10k <- 10000

#=================== st =====================

n <- S
mu0_st <- 1
n0_st <- 10
s0_st <- 10
nu0_st <- 24

kappa0_st <- n0_st
alpha0_st <- nu0_st/2
beta0_st <- nu0_st*s0_st/2         #ou s0_st^2 ?
prec0_st <- alpha0_st/beta0_st

mu1_st <- (kappa0_st*mu0_st + S*mean(Y_s))/(kappa0_st + S)
kappa1_st <- kappa0_st + S                                       # n*
alpha1_st <- alpha0_st + S/2
beta1_st <- beta0_st + RSS_Ys/2 + (kappa0_st*S*((mu0_st - mean(Y_s))^2))/(2*(kappa0_st + S))
prec1_st <- alpha1_st/beta1_st

gamma_sample10k_st <- rgamma(M10k, shape = alpha1_st, rate = beta1_st)
prec1_hat_10k_st<- mean(gamma_sample10k_st)
sig2_hat_10k_st <- mean(1/gamma_sample10k_st)
sig2_st_estim10k_error <- sig2_hat_10k_st - 1/prec1_st

# normal_sample10k_st <- rnorm(M10k, mean = mu1_st, sd = sqrt(1/(kappa1_st*mean(gamma_sample10k_st))))
# mu1_st_estim10k <- mean(normal_sample10k_st)
# mu1.st_estim10k_error <- mu1_st_estim10k - mu1_st

sample_10knormals_st <- numeric(M10k)
for (i in 1:M10k) {
  sample_10knormals_st[i] <- rnorm(1, mean = mu1_st, sd = sqrt(1 / (kappa1_st * gamma_sample10k_st[i])))
}
mu_hat_10k_st <- mean(sample_10knormals_st)
mu1_st_estim10k_error <- mu_hat_10k_st - mu1_st


#=================== nd =====================


mu0_nd <- 1
n0_nd <- 1
s0_nd <- 5
nu0_nd <- 9

kappa0_nd <- n0_nd
alpha0_nd <- nu0_nd/2
beta0_nd <- nu0_nd*s0_nd/2         #ou s0_nd^2 ?
prec0_nd <- alpha0_nd/beta0_nd

mu1_nd <- (kappa0_nd*mu0_nd + S*mean(Y_s))/(kappa0_nd + S)
kappa1_nd <- kappa0_nd + S                                       # n*
alpha1_nd <- alpha0_nd + S/2
beta1_nd <- beta0_nd + RSS_Ys/2 + (kappa0_nd*S*((mu0_nd - mean(Y_s))^2))/(2*(kappa0_nd + S))
prec1_nd <- alpha1_nd/beta1_nd

gamma_sample10k_nd <- rgamma(M10k, shape = alpha1_nd, rate = beta1_nd)
prec1_hat_10k_nd<- mean(gamma_sample10k_nd)
sig2_hat_10k_nd <- mean(1/gamma_sample10k_nd)
sig2_nd_estim10k_error <- sig2_hat_10k_nd - 1/prec1_nd

# normal_sample10k_nd <- rnorm(M10k, mean = mu1_nd, sd = sqrt(1/(kappa1_nd*mean(gamma_sample10k_nd))))
# mu1_nd_estim10k <- mean(normal_sample10k_nd)
# mu1.st_estim10k_error <- mu1_nd_estim10k - mu1_nd

sample_10knormals_nd <- numeric(M10k)
for (i in 1:M10k) {
  sample_10knormals_nd[i] <- rnorm(1, mean = mu1_nd, sd = sqrt(1 / (kappa1_nd * gamma_sample10k_nd[i])))
}
mu_hat_10k_nd <- mean(sample_10knormals_nd)
mu1_nd_estim10k_error <- mu_hat_10k_nd - mu1_nd


parameters <- c("mu1_st", "mu1_nd","sig2_st", "sig2_nd")
errors_10k <- c(mu1_st_estim10k_error, mu1_nd_estim10k_error,sig2_st_estim10k_error, sig2_nd_estim10k_error)
errors_10k <- data.frame(Parameter = parameters, Estimate = errors_10k)
print(errors_10k)


#=================== histograms =====================

#=== vs Y_s ======

if (!requireNamespace("scales", quietly = TRUE)) {
    install.packages("scales")
}
library(scales)

set.seed(123)

YSapt_10k_st <- rnorm(S, mu_hat_10k_st, sqrt(sig2_hat_10k_st))
YSapt_10k_nd <- rnorm(S, mu_hat_10k_nd, sqrt(sig2_hat_10k_nd))
hist(YSapt_10k_st, breaks = 60, main = "Histogram of YSapt_10k_st",
     xlab = "Value", ylab = "Frequency", col = "lightblue", border = "black")
hist(YSapt_10k_nd, breaks = 60, col = alpha("red", 0.5), add = TRUE)
legend("topright", legend = c("YSapt_10k_st", "YSapt_10k_nd"), fill = c("lightblue", alpha("red", 0.5)))
x_values <- seq(-4, 6, length.out = S)  # Define x-axis values


#=== st vs nd ======


hist(sample_10knormals_st, breaks = 30, main = "Histogram of YSapt_10k_st",
     xlab = "Value", ylab = "Frequency", col = "lightblue", border = "black")
hist(sample_10knormals_nd, breaks = 15, col = alpha("red", 0.5), add = TRUE)
legend("topright", legend = c("YSapt_10k_st", "YSapt_10k_nd"), fill = c("lightblue", alpha("red", 0.5)))
x_values <- seq(-4, 6, length.out = S)  # Define x-axis values
#pdf_values <- dnorm(x_values, mean = 1, sd = sqrt(3))  # Calculate PDF values
#pdf_values <- pdf_values * mean(hist(YSapt_10k_st, plot = FALSE)$counts) / max(pdf_values)
#lines(x_values, pdf_values, col = "blue", lwd = 2)



#=== vs calc ======

#____ st ____
x <- sample_10knormals_st #sample
h <- hist(x, breaks = 20, plot=FALSE) #generate hist
plot(h, col="grey") #plot hist
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
lines(x = xlines,y=dnorm(xlines,mu1_st, sqrt(1/(prec1_st*kappa1_st))) *length(x)*diff(h$breaks)[1])

#____ nd ____
x <- sample_10knormals_nd #sample
h <- hist(x, breaks = 20, plot=FALSE) #generate hist
plot(h, col="grey") #plot hist
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
lines(x = xlines,y=dnorm(xlines,mu1_nd, sqrt(1/(prec1_nd*kappa1_nd))) *length(x)*diff(h$breaks)[1])






#====================================== M100 ======================================



M100 <- 100


#=================== st =====================



gamma_sample100_st <- rgamma(M100, shape = alpha1_st, rate = beta1_st)
prec1_hat_100_st<- mean(gamma_sample100_st)
sig2_hat_100_st <- mean(1/gamma_sample100_st)
sig2_st_estim100_error <- sig2_hat_100_st - 1/prec1_st

# normal_sample100_st <- rnorm(M100, mean = mu1_st, sd = sqrt(1/(kappa1_st*mean(gamma_sample100_st))))
# mu1_st_estim100 <- mean(normal_sample100_st)
# mu1.st_estim100_error <- mu1_st_estim100 - mu1_st

sample_100normals_st <- numeric(M100)
for (i in 1:M100) {
  sample_100normals_st[i] <- rnorm(1, mean = mu1_st, sd = sqrt(1 / (kappa1_st * gamma_sample100_st[i])))
}
mu_hat_100_st <- mean(sample_100normals_st)
mu1_st_estim100_error <- mu_hat_100_st - mu1_st


#=================== nd =====================




gamma_sample100_nd <- rgamma(M100, shape = alpha1_nd, rate = beta1_nd)
prec1_hat_100_nd<- mean(gamma_sample100_nd)
sig2_hat_100_nd <- mean(1/gamma_sample100_nd)
sig2_nd_estim100_error <- sig2_hat_100_nd - 1/prec1_nd

# normal_sample100_nd <- rnorm(M100, mean = mu1_nd, sd = sqrt(1/(kappa1_nd*mean(gamma_sample100_nd))))
# mu1_nd_estim100 <- mean(normal_sample100_nd)
# mu1.st_estim100_error <- mu1_nd_estim100 - mu1_nd

sample_100normals_nd <- numeric(M100)
for (i in 1:M100) {
  sample_100normals_nd[i] <- rnorm(1, mean = mu1_nd, sd = sqrt(1 / (kappa1_nd * gamma_sample100_nd[i])))
}
mu_hat_100_nd <- mean(sample_100normals_nd)
mu1_nd_estim100_error <- mu_hat_100_nd - mu1_nd

parameters <- c("mu1_st", "mu1_nd","sig2_st", "sig2_nd")
errors_100 <- c(mu1_st_estim100_error, mu1_nd_estim100_error,sig2_st_estim100_error, sig2_nd_estim100_error)
errors_100 <- data.frame(Parameter = parameters, Estimate = errors_100)
print(errors_100)


#=================== histograms =====================




#=== vs Y_s ======

if (!requireNamespace("scales", quietly = TRUE)) {
    install.packages("scales")
}
library(scales)

set.seed(123)

YSapt_100_st <- rnorm(S, mu_hat_100_st, sqrt(sig2_hat_100_st))
YSapt_100_nd <- rnorm(S, mu_hat_100_nd, sqrt(sig2_hat_100_nd))
hist(YSapt_100_st, breaks = 60, main = "Histogram of YSapt_100_st",
     xlab = "Value", ylab = "Frequency", col = "lightblue", border = "black")
hist(YSapt_100_nd, breaks = 60, col = alpha("red", 0.5), add = TRUE)
legend("topright", legend = c("YSapt_100_st", "YSapt_100_nd"), fill = c("lightblue", alpha("red", 0.5)))
x_values <- seq(-4, 6, length.out = S)  # Define x-axis values


#=== st vs nd ======


hist(sample_100normals_st, breaks = 30, main = "Histogram of YSapt_100_st",
     xlab = "Value", ylab = "Frequency", col = "lightblue", border = "black")
hist(sample_100normals_nd, breaks = 30, col = alpha("red", 0.5), add = TRUE)
legend("topright", legend = c("YSapt_100_st", "YSapt_100_nd"), fill = c("lightblue", alpha("red", 0.5)))
x_values <- seq(-4, 6, length.out = S)  # Define x-axis values

#pdf_values <- dnorm(x_values, mean = 1, sd = sqrt(3))  # Calculate PDF values
#pdf_values <- pdf_values * mean(hist(YSapt_100_st, plot = FALSE)$counts) / max(pdf_values)
#lines(x_values, pdf_values, col = "blue", lwd = 2)



#=== vs calc ======

#____ st ____
x <- sample_100normals_st #sample
h <- hist(x, breaks = 20, plot=FALSE) #generate hist
plot(h, col="grey") #plot hist
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
lines(x = xlines,y=dnorm(xlines,mu1_st, sqrt(1/(prec1_st*kappa1_st))) *length(x)*diff(h$breaks)[1])

#____ nd ____
x <- sample_100normals_nd #sample
h <- hist(x, breaks = 20, plot=FALSE) #generate hist
plot(h, col="grey") #plot hist
xlines <-seq(min(h$breaks),max(h$breaks),length.out=100) #seq of x for pdf
lines(x = xlines,y=dnorm(xlines,mu1_nd, sqrt(1/(prec1_nd*kappa1_nd))) *length(x)*diff(h$breaks)[1])


#====================================== 3b ======================================

format6 <- function(x) {
  formated <- format(round(x, 6), nsmall = 6)
  return(formated)
}

parameters_mu <- c("ml","st","nd")
apt_deriv_mu <- c(mean(Y_s),mu1_st,mu1_nd)
estim10k_mu <- c("",format6(mu_hat_10k_st),format6(mu_hat_10k_nd))
estim100_mu <- c("",format6(mu_hat_100_st),format6(mu_hat_100_nd))
apr_mu <- c("",mu0_st,mu0_nd)
n0_vector <- c("",n0_st,n0_nd)
ex3b_mu <- data.frame(Parameter = parameters_mu, Mu.calc = apt_deriv_mu, Mu.M10k = estim10k_mu, Mu.M100 = estim100_mu, Prior = apr_mu, n_0 = n0_vector)
print(ex3b_mu)

parameters_sig2 <- c("ml","st","nd")
apt_deriv_sig2 <- c(sd(Y_s)^2,1/prec1_st,1/prec1_nd)
estim10k_sig2 <- c("",format6(sig2_hat_10k_st),format6(sig2_hat_10k_nd))
estim100_sig2 <- c("",format6(sig2_hat_100_st),format6(sig2_hat_100_nd))
apr_sig2 <- c("",1/prec0_st,1/prec0_nd)
n0_vector <- c("",n0_st,n0_nd)
ex3b_sig2 <- data.frame(Parameter = parameters_sig2, Variance.calc = apt_deriv_sig2, Variance.M10k = estim10k_sig2, Variance.M100 = estim100_sig2, Prior = apr_sig2, n_0 = n0_vector)
print(ex3b_sig2)


#====================================== working on ======================================



YSapt_10k_st <- rnorm(1000, mu_hat_10k_st, sqrt(sig2_hat_10k_st))
YSapt_100_st <- rnorm(1000, mu_hat_100_st, sqrt(sig2_hat_100_st))
YSapt_10k_nd <- rnorm(1000, mu_hat_10k_nd, sqrt(sig2_hat_10k_nd))
YSapt_100_nd <- rnorm(1000, mu_hat_100_nd, sqrt(sig2_hat_100_nd))

c(sum((YSapt_10k_st - Y_s)^2)/1000,sum((YSapt_100_st - Y_s)^2)/1000,sum((YSapt_10k_nd - Y_s)^2)/1000,sum((YSapt_100_nd - Y_s)^2)/1000)


sum((YSapt_10k_st - Y_s)^2)/1000
sum((YSapt_100_st - Y_s)^2)/1000
sum((YSapt_10k_nd - Y_s)^2)/1000
sum((YSapt_100_nd - Y_s)^2)/1000


#______________ 202310102256 _______________

if (!requireNamespace("scales", quietly = TRUE)) {
    install.packages("scales")
}
library(scales)

hist(sample_10knormals_st, breaks = 30, main = "Histogram of sample_10knormals_st",
     xlab = "Value", ylab = "Frequency", col = "lightblue", border = "black")


hist(sample_100normals_st, breaks = 30, col = alpha("red", 0.5), add = TRUE)

legend("topright", legend = c("sample_10knormals_st", "sample_100normals_st"), fill = c("lightblue", alpha("red", 0.5)))

x_values <- seq(-4, 6, length.out = S)  # Define x-axis values
pdf_values <- dnorm(x_values, mean = mu1_st, sd = sqrt(1/prec1_st))  # Calculate PDF values

pdf_values <- pdf_values * mean(hist(sample_10knormals_st, plot = FALSE)$counts) / max(pdf_values)

lines(x_values, pdf_values, col = "blue", lwd = 2)





# Create the first histogram
hist(sample_10knormals_st, main = "Histogram",
     xlab = "mu_i", ylab = "FrequencyM10k", col = "lightblue", breaks=30, border = "black")

# Set up the first scale
par(new=TRUE)

# Create the second histogram
hist(sample_100normals_st, col = alpha("red", 0.5), breaks=30, axes=FALSE)

# Set up the second scale on the right side
axis(4)
mtext("FrequencyM100", side=4, line=3)

legend("topright", legend = c("M = 10000", "M = 100 (right scale) "), fill = c("lightblue", alpha("red", 0.5)))

x_values <- seq(-4, 6, length.out = 10000)  # Define x-axis values
pdf_values <- dnorm(x_values, mean = mu1_st, sd = sqrt(1/(prec1_st*kappa1_st)))  # Calculate PDF values

lines(x_values, pdf_values, col = "blue", lwd = 2)




# Create the first histogram
hist(sample_10knormals_nd, main = "Histogram",
     xlab = "mu_i", ylab = "FrequencyM10k", col = "lightblue", breaks=20, border = "black")

# Set up the first scale
par(new=TRUE)

# Create the second histogram
hist(sample_100normals_nd, col = alpha("red", 0.5), breaks=20, axes=FALSE)

# Set up the second scale on the right side
axis(4)
mtext("FrequencyM100", side=4, line=3)

legend("topright", legend = c("M = 10000", "M = 100 (right scale) "), fill = c("lightblue", alpha("red", 0.5)))

x_values <- seq(0.8, 1.2, length.out = 1000)  # Define x-axis values
pdf_values <- dnorm(x_values, mean = mu1_nd, sd = sqrt(1/(prec1_nd*kappa1_nd)))  # Calculate PDF values

lines(x_values, pdf_values, col = "blue", lwd = 2)






hist(sample_10knormals_st, main="Histogram Comparison", xlab="Value", col="blue", breaks=30, probability=TRUE)

# Overlay the second histogram
hist(sample_100normals_st, col="red", breaks=30, probability=TRUE, add=TRUE)

# Add a legend
legend("topright", legend=c("Sample 1", "Sample 2"), fill=c("blue", "red"))




# 202310110002



# Determine the overall x-axis limits based on both datasets
x_limits <- range(sample_10knormals_nd, sample_100normals_nd)

# Create the first histogram
hist(
    sample_10knormals_nd,
    main = "Histogram",
    xlab = "mu_i",
    ylab = "FrequencyM10k",
    col = "lightblue",
    breaks = 20,
    border = "black",
    xlim = x_limits
)

# Set up the first scale
par(new = TRUE)

# Create the second histogram
hist(
    sample_100normals_nd,
    col = alpha("red", 0.5),
    breaks = 20,
    axes = FALSE,
    xlim = x_limits
)

# Set up the second scale on the right side
axis(4)
mtext("FrequencyM100", side = 4, line = 3)

legend(
    "topright",
    legend = c("M = 10000", "M = 100 (right scale) "),
    fill = c("lightblue", alpha("red", 0.5))
)

x_values <- seq(
    x_limits[1],
    x_limits[2],
    length.out = 10000
)  # Define x-axis values

pdf_values <- dnorm(x_values, mean = mu1_nd, sd = sqrt(1 / (prec1_nd * 2000)))  # Calculate PDF values

# Plot the PDF curve
lines(x_values, pdf_values, col = "blue", lwd = 2)

