install.packages("MASS")
library(MASS)

#----------3a)

MC <- function(S){
  MC_sample <- matrix(c(numeric(S),numeric(S)),S)
  for (i in 1:S) {
    MC_sample[i,] <-mvrnorm(1, c(0, 0) , matrix(c(1, 0.4, 0.4, 1),2))
  }
  return(data.frame(Mean = colMeans(MC_sample), StError = apply(MC_sample, 2, sd), NumStError = apply(MC_sample, 2, sd)/sqrt(S)))
}

MC(100)

#----------3b)

set.seed(123)

S <- 100
rho <- 0.8

x1_gibbs <- numeric(S)
x2_gibbs <- numeric(S)
x1_gibbs[1] <- -2.5
x2_gibbs[1] <- 2.5

for (i in 1:S) {
  mu_x1.x2 <- 0 + rho*(1/1)*(x2_gibbs[i] - 0)
  sig_x1.x2 <- 1*sqrt(1 - rho^2)
  x1_gibbs[i] <- rnorm(1, mu_x1.x2 , sig_x1.x2)
  
  mu_x2.x1 <- 0 + rho*(1/1)*(x1_gibbs[i] - 0)
  sig_x2.x1 <- 1*sqrt(1 - rho^2)
  x2_gibbs[i+1] <- rnorm(1, mu_x2.x1 , sig_x2.x1)
}

c(mean(x1_gibbs),mean(x2_gibbs[2:length(x2_gibbs)]))

E3b <- data.frame(Mean = c(mean(x1_gibbs),mean(x2_gibbs[2:length(x2_gibbs)])), StError = c(sd(x1_gibbs),sd(x2_gibbs[2:length(x2_gibbs)])))

#----------3c

set.seed(123)

y <- c(0, 0, 1, 1)
theta <- c(-2.5, 2.5)
rho<- 0.8
sigma <- 1*sqrt(1 - rho^2)
#, rho, y, sigma
gibbs_N2var <- function(B, theta, y, rho) {
  theta_sims <- matrix(0, B, 2)
  for (i in 1:B) {
    m1 <- y[1] + rho * (theta[2] - y[2])
    theta[1] <- rnorm(1, m1, y[3]*sqrt(1 - rho^2))
    m2 <- y[2] + rho * (theta[1] - y[1])
    theta[2] <- rnorm(1, m2, y[4]*sqrt(1 - rho^2))
    theta_sims[i, ] <- theta
  }
  return(theta_sims)
}

chainB100_rho0 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0)
chainB100_rho05 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.5)
chainB100_rho099 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.99)
chainB100_rho0999 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.999)

E3c <- data.frame(Mean = c(mean(chainB100_rho0),mean(chainB100_rho05),mean(chainB100_rho099),mean(chainB100_rho0999)), StError = c(sd(chainB100_rho0),sd(chainB100_rho05),sd(chainB100_rho099),sd(chainB100_rho0999)))

# a condicional total de X_1 tem dois termos: sua marginal (o que queremos) e um segundo termo multiplicado por rho.
# é deste segundo termo que queremos marginalizar X1, o que ocorre assintoticamente, visto que a covariância (rho) é sempre menor que a variância.
# Mas um rho alto torna persistente o efeito daquele segundo termo da condicional total de X1, atrasando a conversão.

hist(mvrnorm(100, c(0, 0) , matrix(c(1, 0.4, 0.4, 1),2)))
hist(chainB100_rho0)
hist(chainB100_rho05)
hist(chainB100_rho099)
hist(chainB100_rho0999)

#----------3d

chainB10k_rho0 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0)
chainB10k_rho05 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.5)
chainB10k_rho099 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.99)
chainB10k_rho0999 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.999)


E3d <- data.frame(Mean = c(mean(chainB10k_rho0),mean(chainB10k_rho05),mean(chainB10k_rho099),mean(chainB10k_rho0999)), StError = c(sd(chainB10k_rho0),sd(chainB10k_rho05),sd(chainB10k_rho099),sd(chainB10k_rho0999)))

hist(mvrnorm(10000, c(0, 0) , matrix(c(1, 0.4, 0.4, 1),2)))
hist(chainB10k_rho0)
hist(chainB10k_rho05)
hist(chainB10k_rho099)
hist(chainB10k_rho0999)










#================ history ============


library(MASS)
mean_vector <- c(0, 0)
variance_vector <- c(1, 1) # Variance for each variable
correlation <- 0.4

cov_matrix <- matrix(c(variance_vector[1], correlation, correlation, variance_vector[2]), nrow = 2)

#3a)

S <- 100

set.seed(123)

MC_x <- mvrnorm(S, mu = mean_vector, Sigma = cov_matrix)
means_MC <- c(NA, mean(MC_x[,1]), mean(MC_x[,2]))
sd_MC <- c(NA, (sd(MC_x[,1])), (sd(MC_x[,2])))
E3a <- data.frame(Mean = means_MC[2:3], StError = sd_MC[2:3])

#or

MC_x1 <- rnorm(S)
MC_x2 <- rnorm(S)
MC_x <- matrix(0, S, 2)
MC_x[,1] <- MC_x1
MC_x[,2] <- MC_x2


means_MC_uni <- c(NA, mean(MC_x1), mean(MC_x2))
sd_MC_uni <- c(NA, sd(MC_x1), sd(MC_x2))
E3a_uni <- data.frame(Mean = means_MC_uni[2:3], StError = sd_MC_uni[2:3])

#3b)

set.seed(123)
rho <- 0.4
x1_gibbs <- numeric(S)
x2_gibbs <- numeric(S)
x1_gibbs[1] <- runif(1)
x2_gibbs[1] <- runif(1)

for (i in 1:S) {
mu_x1.x2 <- mean(MC_x1) + rho*(sd(MC_x1)/sd(MC_x2))*(x2_gibbs[i] - mean(MC_x2))
sig_x1.x2 <- sd(MC_x1)*sqrt(1 - rho^2)
x1_gibbs[i] <- rnorm(1, mu_x1.x2 , sig_x1.x2)

mu_x2.x1 <- mean(MC_x2) + rho*(sd(MC_x2)/sd(MC_x1))*(x1_gibbs[i] - mean(MC_x1))
sig_x2.x1 <- sd(MC_x2)*sqrt(1 - rho^2)
x2_gibbs[i+1] <- rnorm(1, mu_x2.x1 , sig_x2.x1)
}

#or
set.seed(123)

S <- 100
rho <- 0.8

x1_gibbs <- numeric(S)
x2_gibbs <- numeric(S)
x1_gibbs[1] <- -2.5
x2_gibbs[1] <- 2.5

for (i in 1:S) {
  mu_x1.x2 <- 0 + rho*(1/1)*(x2_gibbs[i] - 0)
  sig_x1.x2 <- 1*sqrt(1 - rho^2)
  x1_gibbs[i] <- rnorm(1, mu_x1.x2 , sig_x1.x2)
  
  mu_x2.x1 <- 0 + rho*(1/1)*(x1_gibbs[i] - 0)
  sig_x2.x1 <- 1*sqrt(1 - rho^2)
  x2_gibbs[i+1] <- rnorm(1, mu_x2.x1 , sig_x2.x1)
}

c(mean(x1_gibbs),mean(x2_gibbs[2:length(x2_gibbs)]))

E3b <- data.frame(Mean = c(mean(x1_gibbs),mean(x2_gibbs[2:length(x2_gibbs)])), StError = c(sd(x1_gibbs),sd(x2_gibbs[2:length(x2_gibbs)])))

#or

set.seed(123)

y <- c(0, 0)
theta <- c(-2.5, 2.5)
rho<- 0.8
sigma <- 1*sqrt(1 - rho^2)
#, rho, y, sigma
gibbs_N2var <- function(B, theta, y, rho, sigma) {
  theta_sims <- matrix(0, B, 2)
  for (i in 1:B) {
    m1 <- y[1] + rho * (theta[2] - y[2])
    theta[1] <- rnorm(1, m1, sigma)
    m2 <- y[2] + rho * (theta[1] - y[1])
    theta[2] <- rnorm(1, m2, sigma)
    theta_sims[i, ] <- theta
  }
  return(theta_sims)
}

chain_B100 <- gibbs_N2var(100, c(-2.5, 2.5), c(0, 0), 0.8, 1*sqrt(1 - rho^2))
chain_B10k <- gibbs_N2var(10000, c(-2.5, 2.5), c(0, 0), 0.8, 1*sqrt(1 - rho^2))

c(mean(chain_B100[,1]),mean(chain_B100[,2]))

E3b <- data.frame(c(mean(chain_B100[,1]),mean(chain_B100[,2])), StError = c(sd(chain_B100[,1]),sd(chain_B100[,2])))


#3c

set.seed(123)

y <- c(0, 0, 1, 1)
theta <- c(-2.5, 2.5)
rho<- 0.8
sigma <- 1*sqrt(1 - rho^2)
#, rho, y, sigma
gibbs_N2var <- function(B, theta, y, rho) {
  theta_sims <- matrix(0, B, 2)
  for (i in 1:B) {
    m1 <- y[1] + rho * (theta[2] - y[2])
    theta[1] <- rnorm(1, m1, y[3]*sqrt(1 - rho^2))
    m2 <- y[2] + rho * (theta[1] - y[1])
    theta[2] <- rnorm(1, m2, y[4]*sqrt(1 - rho^2))
    theta_sims[i, ] <- theta
  }
  return(theta_sims)
}

chainB100_rho0 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0)
chainB100_rho05 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.5)
chainB100_rho099 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.99)
chainB100_rho0999 <- gibbs_N2var(100, c(-2.5, 2.5), y, 0.999)


E3c <- data.frame(Mean = c(mean(chainB100_rho0),mean(chainB100_rho05),mean(chainB100_rho099),mean(chainB100_rho0999)), StError = c(sd(chainB100_rho0),sd(chainB100_rho05),sd(chainB100_rho099),sd(chainB100_rho0999)))

hist(MC_x)
hist(chainB100_rho0)
hist(chainB100_rho05)
hist(chainB100_rho099)
hist(chainB100_rho0999)

#3d

chainB10k_rho0 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0)
chainB10k_rho05 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.5)
chainB10k_rho099 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.99)
chainB10k_rho0999 <- gibbs_N2var(10000, c(-2.5, 2.5), y, 0.999)


E3d <- data.frame(Mean = c(mean(chainB10k_rho0),mean(chainB10k_rho05),mean(chainB10k_rho099),mean(chainB10k_rho0999)), StError = c(sd(chainB10k_rho0),sd(chainB10k_rho05),sd(chainB10k_rho099),sd(chainB10k_rho0999)))

MC_x1_S10k <- rnorm(10000)
MC_x2_S10k <- rnorm(10000)
MC_x_S10k <- matrix(0, 10000, 2)
MC_x_S10k[,1] <- MC_x1
MC_x_S10k[,2] <- MC_x2

hist(MC_x_S10k)
hist(chainB10k_rho0)
hist(chainB10k_rho05)
hist(chainB10k_rho099)
hist(chainB10k_rho0999)








Sx2 <- 2*S
Gibbs_x <- data.frame( rho1 = numeric(Sx2), rho2 = numeric(Sx2), rho3 = numeric(Sx2), rho4 = numeric(Sx2))
Gibbs_x[1,] = rnorm(1, mean = 0, sd = 1)

rho <- c(0,0.5,0.99,0.999)

for (i in 1:(Sx2-1)) {
  Gibbs_x[i+1,] <- rnorm(1, mean = 0, sd = 1) + rho*(rho - Gibbs_x[i,])
}

Gibbs_x1 <- data.frame( rho1 = numeric(Sx2/2), rho2 = numeric(Sx2/2), rho3 = numeric(Sx2/2), rho4 = numeric(Sx2/2))
Gibbs_x2 <- data.frame( rho1 = numeric(Sx2/2), rho2 = numeric(Sx2/2), rho3 = numeric(Sx2/2), rho4 = numeric(Sx2/2))

Gibbs_x1 <- Gibbs_x[seq(1, Sx2, by = 2),]
Gibbs_x2 <- Gibbs_x[seq(2, Sx2, by = 2),]

means_Gibbs <- data.frame (Rho = rho, mean_x1 = numeric(4), mean_x2 = numeric(4) )
for (i in 1:4){
  means_Gibbs[i,2] <- mean(Gibbs_x1[,i])
  means_Gibbs[i,3] <- mean(Gibbs_x2[,i])
}
means <- rbind (means_MC, means_Gibbs)
View(means)


Gibbs_Varx <- data.frame( rho1 = numeric(Sx2), rho2 = numeric(Sx2), rho3 = numeric(Sx2), rho4 = numeric(Sx2))
Gibbs_Varx[1,] = 1 / rgamma(1, shape = 2, rate = 1)

rho <- c(0,0.5,0.99,0.999)

for (i in 1:(Sx2-1)) {
  Gibbs_Varx[i+1,] <- 1 / rgamma(1, shape = 2, rate = 1) + rho*(rho - Gibbs_Varx[i,])
}

Gibbs_Varx1 <- data.frame( rho1 = numeric(Sx2/2), rho2 = numeric(Sx2/2), rho3 = numeric(Sx2/2), rho4 = numeric(Sx2/2))
Gibbs_Varx2 <- data.frame( rho1 = numeric(Sx2/2), rho2 = numeric(Sx2/2), rho3 = numeric(Sx2/2), rho4 = numeric(Sx2/2))

Gibbs_Varx1 <- Gibbs_Varx[seq(1, Sx2, by = 2),]
Gibbs_Varx2 <- Gibbs_Varx[seq(2, Sx2, by = 2),]

Var_Gibbs <- data.frame (Rho = rho, Var_x1 = numeric(4), Var_x2 = numeric(4) )
for (i in 1:4){
  Var_Gibbs[i,2] <- mean(Gibbs_Varx1[,i])
  Var_Gibbs[i,3] <- mean(Gibbs_Varx2[,i])
}
Vars <- rbind (Var_MC, Var_Gibbs)
View(Vars)


#---------------------

Sx2 <- 200
Gibbs_x <- numeric(Sx2)
Gibbs_x[1] = rnorm(1, mean = 0, sd = 1)

rho <- c(0,0.5,0.99,0.999)

for (i in 1:(Sx2-1)) {
    Gibbs_x[i+1] <- rnorm(1, mean = 0, sd = 1) + rho*(rho - Gibbs_x[i])
}

Gibbs_x1 <- vector("numeric", length = length(Gibbs_x) %/% 2)
Gibbs_x2 <- vector("numeric", length = length(Gibbs_x) %/% 2)

Gibbs_x1 <- Gibbs_x[seq(1, length(Gibbs_x), by = 2)]
Gibbs_x2 <- Gibbs_x[seq(2, length(Gibbs_x), by = 2)]


