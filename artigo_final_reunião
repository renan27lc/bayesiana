#==============================----- FIXED WINDOW = W, H=1 in whole code, NO INTERCEPT, n=3 ------============================================================

N <- 12
T <- nrow(yields)
yieldsN <- yields[,1:N] #*100
W <- 108
theta_ij <- 0.00001


residual_variances_ar <- numeric(N)
intercepts_ar <- numeric(N)

for (i in 1:N) {
  time_series <- yieldsN[, i]
  ar6 <- arima(time_series, order = c(6, 0, 0))
  residual_variances_ar[i] <- var(resid(ar6))
  intercepts_ar[i] <- ar6$coef[1]
}

#_____________________________________________________________________
#----1) matrix Psi.prior = [Phi_0.prior Phi_1.prior]'
#_____________________________________________________________________

Phi_0.prior <- intercepts_ar

Phi_1.prior <- diag(0.99, N)

Psi.prior <- t(cbind(Phi_0.prior, Phi_1.prior))

#_____________________________________________________________________
#----2) matrix Omega.prior
#_____________________________________________________________________

Omega.prior <- diag(N+1)*theta


#_____________________________________________________________________
#----3) matrices X and Y
#_____________________________________________________________________

Y <-  as.matrix(yieldsN[2:W, ])

Y_ <-  yieldsN[1:(W - 1), ]
X_intercept <- matrix(1, ncol = 1, nrow = (W-1))
X <- as.matrix(cbind(X_intercept,Y_))

#_____________________________________________________________________
#----4) Psi.posterior and BVAR estimation
#_____________________________________________________________________

# Psi.posterior <- solve(solve(Omega.prior) + t(X) %*% X) %*% (solve(Omega.prior) %*% Psi.prior + t(X) %*% (Y))             #### But Omega is NxN and XtX is MxM (M = N+1)!
Omega.prior_22x22 <- as.matrix(rbind(matrix(1, ncol = (N+1), nrow = 1),cbind(matrix(1, ncol = 1, nrow = N), Omega.prior)))
Psi.posterior <- solve(solve(Omega.prior_22x22) + t(X) %*% X) %*% (solve(Omega.prior_22x22) %*% Psi.prior + t(X) %*% (Y))             #### But Omega is NxN and XtX is MxM (M = N+1)!

Phi_0.posterior <- as.matrix(t(Psi.posterior)[,1])
Phi_1.posterior <- as.matrix(t(Psi.posterior)[,2:nrow(Psi.posterior)])

E_yieldsN_car <- matrix(nrow = (T - W), ncol = N)
rownames(E_yieldsN_car) <- rownames(yieldsN[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yieldsN_car[t , ] <- Phi_0.posterior + Phi_1.posterior %*% t(yieldsN[(t + W - 1), ])
}

#_____________________________________________________________________
#----5) MSFE Carriero
#_____________________________________________________________________

yieldsN_T0 <- yieldsN[(W + 1):T,]

MSFE_car <- matrix(nrow = 1, ncol = ncol(yieldsN_T0))
for (i in 1:ncol(yieldsN_T0)) {
  MSFE_car[,i] <- (sum(E_yieldsN_car[,i] - yieldsN_T0[,i])^2)/(T - W)
}

#_____________________________________________________________________
#----6) MSFE Random Walk
#_____________________________________________________________________

E_yieldsN_rw <- yieldsN[(W):(T - 1),]
rownames(E_yieldsN_rw) <- rownames(yieldsN[(W + 1):T,])

MSFE_rw <- matrix(nrow = 1, ncol = ncol(yieldsN_T0))
for (i in 1:ncol(yieldsN_T0)) {
    MSFE_rw[,i] <- (sum(E_yieldsN_rw[,i] - yieldsN_T0[,i])^2)/(T - W)
}

#_____________________________________________________________________
#----7) MSFE AR
#_____________________________________________________________________


#_____________________________________________________________________
#----8) MSFE VAR
#_____________________________________________________________________

Psi.VAR <- solve(t(X) %*% X) %*% (t(X) %*% (Y))

Phi_0.VAR <- as.matrix(t(Psi.VAR)[,1])
Phi_1.VAR <- as.matrix(t(Psi.VAR)[,2:nrow(Psi.VAR)])

E_yieldsN_VAR <- matrix(nrow = (T - W), ncol = ncol(yieldsN))
rownames(E_yieldsN_VAR) <- rownames(yieldsN[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yieldsN_VAR[t , ] <- Phi_0.VAR + Phi_1.VAR %*% t(yieldsN[(t + W - 1), ])
}

MSFE_VAR <- matrix(nrow = 1, ncol = ncol(yieldsN_T0))
for (i in 1:ncol(yieldsN_T0)) {
  MSFE_VAR[i] <- (sum(E_yieldsN_VAR[,i] - yieldsN_T0[,i])^2)/(T - W)
}

MSFE_VAR/MSFE_rw

#var_model <- VAR(yieldsN[1:W, ], p = 1)


#_____________________________________________________________________
#----9) THETA
#_____________________________________________________________________


grid_theta_ij <- c(2e-16, 4e-16, 6e-16, 8e-16, 1e-15, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1, 10)

#theta_ij <- 1000

  Omega.prior <- matrix( nrow = N, ncol = N)
  for (i in 1:N) {
    for (j in 1:N) {
      if (i != j) {
        Omega.prior[i, j] <- theta_ij * residual_variances_ar[i] / residual_variances_ar[j]
      } else {
        Omega.prior[i, j] <- theta_ii
      }
    }
  }

database_size <- length(as.matrix(yieldsN[1:W,]))

Sigma <- diag(residual_variances_ar)
nu.prior <- database_size/10000  # arbitrary choice of nu
S.prior <- Sigma * (nu.prior - N - 1)

Var_Psi.prior <- kronecker(Sigma, Omega.prior)

multivariate_gamma <- function(p, nu) {
  term <- pi^(p*(p-1)/4)
  product <- prod(gamma((nu + 1 - seq_len(p))/2))
  result <- term * product
  return(result)
}

Gamma_nu <- multivariate_gamma(N, nu.prior/2)
Gamma_nuN <- multivariate_gamma(N, (nu.prior + database_size)/2)

mg_lh_simple <- (det(Sigma)^(nu.prior/2) * Gamma_nuN/2) / ((pi)^(database_size*N/2) * Gamma_nu * (det(Sigma + S.prior))^((nu.prior + database_size)/2))

#mg_lh <- (det(Var_Psi.prior)^((nu.prior - W + database_size*N)/2) * Gamma_nuN/2) / ((pi)^(database_size*N*W/2) * Gamma_nu * (det(Var_Psi.prior + S.prior))^((nu.prior + database_size)/2))

mg_lh_simple
