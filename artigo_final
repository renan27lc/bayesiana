optimal_p_values <- numeric(121)
residual_variances_ar <- numeric(121)
intercepts_ar <- numeric(121)

# Loop through each time series
for (i in 1:121) {
  time_series <- yields[, i]
  
  # Initialize variables to store minimum BIC and optimal p
  min_bic <- Inf
  optimal_p <- 0
  
  # Try AR models with different values of p
  for (p in 1:10) {  # You can adjust the range of p as needed
    arima_model <- arima(time_series, order = c(p, 0, 0))
    bic <- AIC(arima_model, k = log(length(time_series)))
    
    # Update optimal p if current model has lower BIC
    if (bic < min_bic) {
      min_bic <- bic
      optimal_p <- p
    }
  }
  
  final_arima_model <- arima(time_series, order = c(optimal_p, 0, 0))
  residual_variances_ar[i] <- var(resid(final_arima_model))
  intercepts_ar[i] <- final_arima_model$coef[1]  # 1 corresponds to the intercept coefficient
  optimal_p_values[i] <- optimal_p
}




#========================================================================================================================================================================



theta <- 0.00001
#Omega_apr [NxN] is the covariance matrix of Phi_1h, which, based on (2), equals to:
Omega_apr <- matrix( nrow =  length(residual_variances_ar), ncol =  length(residual_variances_ar))
for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
  }
}

Omega_apr <- matrix( nrow = length(residual_variances_ar), ncol = length(residual_variances_ar))

for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    if (i != j) {
      Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
    } else {
      Omega_apr[i, j] <- residual_variances_ar[i]  # Keep diagonal elements unchanged
    }
  }
}


det(Omega_apr)

H <- 96
T <- nrow(yields)
N <- ncol(yields)

X_list <- vector("list", length = H)
yieldsX <- cbind(rep(1, T), yields)
for (h in 1:H) {
  X_list[[h]] <- yieldsX[(1):(T - h), ]
}

#View(X_list[[1]])

# There are H Y_h matrixes. For h = 1:H, Y_h is the (T-h)xN matrix: for i in 1:(T-h) Y[i,] <- yields[(h+i),]
Y_list <- vector("list", length = H)
for (h in 1:H) {
  Y_list[[h]] <- yields[(h + 1):(T ), ]
}

#View(Y_list[[1]])


# Psi_apr is a N+1 by N matrix. It is the expected value of Psi_h which is the junction of:
#the vector Phi_0h. whose expected value is intercepts_ar
Phi_0apr <- intercepts_ar

#the matrix Phi_1h[i,j] whose expected value is 0.99 if i = j and 0 if i != j.In other words, it is a diagonal matrix with all values = 0.99 
Phi_1apr <- diag(0.99, N)

Psi_apr <- matrix( nrow = N + 1, ncol = N)
Psi_apr[1, ] <- Phi_0apr
Psi_apr[2:(N + 1), ] <- Phi_1apr









#Final goal: 
# I want to make H matrixes Psi_apt_h <- solve(solve(Omega_apr) + t(X_list[[h]])%*%X)%*%(solve(Omega_apr) %*% Psi_apr + t(X_list[[h]]) %*% Y_list[[h]])

given that:
Omega_apr is an NxN matrix
Psi_apr is an (N+1)xN matrix
yields is a TxN matrix
H <- 120
T <- nrow(yields)
N <- ncol(yields)

and given that X_list and Y_list were obtained as such:

X_list <- vector("list", length = H)
yieldsX <- cbind(rep(1, T), yields)
for (h in 1:H) {
  X_list[[h]] <- yieldsX[(1):(T - h), ]
}

Y_list <- vector("list", length = H)
for (h in 1:H) {
  Y_list[[h]] <- yields[(h + 1):(T ), ]
}

#============------------------RESULT---------+++++++++++++++

# Initialize a list to store matrices
Psi_apt_list <- vector("list", length = H)

# Perform the matrix calculations
for (h in 1:H) {
  # Calculate intermediate matrices
  intermediate_matrix1 <- solve(solve(Omega_apr) + t(X_list[[h]]) %*% as.matrix(X_list[[h]]))
  intermediate_matrix2 <- solve(Omega_apr) %*% Psi_apr + t(X_list[[h]]) %*% as.matrix(Y_list[[h]])
  
  # Calculate Psi_apt_h
  Psi_apt_h <- intermediate_matrix1 %*% intermediate_matrix2
  
  # Store the result in the list
  Psi_apt_list[[h]] <- Psi_apt_h
}







#==============================-----SEM INTERCEPTO FODASS------============================================================


optimal_p_values <- numeric(121)
residual_variances_ar <- numeric(121)
intercepts_ar <- numeric(121)

# Loop through each time series
for (i in 1:121) {
  time_series <- yields[, i]
  
  # Initialize variables to store minimum BIC and optimal p
  min_bic <- Inf
  optimal_p <- 0
  
  # Try AR models with different values of p
  for (p in 1:10) {  # You can adjust the range of p as needed
    arima_model <- arima(time_series, order = c(p, 0, 0))
    bic <- AIC(arima_model, k = log(length(time_series)))
    
    # Update optimal p if current model has lower BIC
    if (bic < min_bic) {
      min_bic <- bic
      optimal_p <- p
    }
  }
  
  final_arima_model <- arima(time_series, order = c(optimal_p, 0, 0))
  residual_variances_ar[i] <- var(resid(final_arima_model))
  intercepts_ar[i] <- final_arima_model$coef[1]  # 1 corresponds to the intercept coefficient
  optimal_p_values[i] <- optimal_p
}


theta <- 0.00001
#Omega_apr [NxN] is the covariance matrix of Phi_1h, which, based on (2), equals to:
Omega_apr <- matrix( nrow =  length(residual_variances_ar), ncol =  length(residual_variances_ar))
for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
  }
}

Omega_apr <- matrix( nrow = length(residual_variances_ar), ncol = length(residual_variances_ar))

for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    if (i != j) {
      Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
    } else {
      Omega_apr[i, j] <- residual_variances_ar[i]  # Keep diagonal elements unchanged
    }
  }
}


det(Omega_apr)

H <- 120
T <- nrow(yields)
N <- ncol(yields)

X_list <- vector("list", length = H)
for (h in 1:H) {
  X_list[[h]] <- yields[(1):(T - h), ]
}

#View(X_list[[1]])

# There are H Y_h matrixes. For h = 1:H, Y_h is the (T-h)xN matrix: for i in 1:(T-h) Y[i,] <- yields[(h+i),]
Y_list <- vector("list", length = H)
for (h in 1:H) {
  Y_list[[h]] <- yields[(h + 1):(T ), ]
}

# Initialize a list to store matrices
Psi_apt_list <- vector("list", length = H)

Phi_1apr <- diag(0.99, N)

# Perform the matrix calculations
for (h in 1:H) {
  # Calculate intermediate matrices
  intermediate_matrix1 <- solve(solve(Omega_apr) + t(X_list[[h]]) %*% as.matrix(X_list[[h]]))
  intermediate_matrix2 <- solve(Omega_apr) %*% Phi_1apr + t(X_list[[h]]) %*% as.matrix(Y_list[[h]])
  
  # Calculate Psi_apt_h
  Psi_apt_h <- intermediate_matrix1 %*% intermediate_matrix2
  
  # Store the result in the list
  Psi_apt_list[[h]] <- Psi_apt_h
}




#==============================-----ROLLING WINDOW = 108, H=1, ar with fixed 108 window, NO INTERCEPT------============================================================



optimal_p_values <- numeric(121)
residual_variances_ar <- numeric(121)
intercepts_ar <- numeric(121)

# Loop through each time series
for (i in 1:121) {
  time_series <- yields[1:108, i]
  
  # Initialize variables to store minimum BIC and optimal p
  min_bic <- Inf
  optimal_p <- 0
  
  # Try AR models with different values of p
  for (p in 1:10) {  # You can adjust the range of p as needed
    arima_model <- arima(time_series, order = c(p, 0, 0))
    bic <- AIC(arima_model, k = log(length(time_series)))
    
    # Update optimal p if current model has lower BIC
    if (bic < min_bic) {
      min_bic <- bic
      optimal_p <- p
    }
  }
  
  final_arima_model <- arima(time_series, order = c(optimal_p, 0, 0))
  residual_variances_ar[i] <- var(resid(final_arima_model))
  intercepts_ar[i] <- final_arima_model$coef[1]  # 1 corresponds to the intercept coefficient
  optimal_p_values[i] <- optimal_p
}

theta <- 0.00001

Omega_apr <- matrix( nrow =  length(residual_variances_ar), ncol =  length(residual_variances_ar))
for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
  }
}

Omega_apr <- matrix( nrow = length(residual_variances_ar), ncol = length(residual_variances_ar))

for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    if (i != j) {
      Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
    } else {
      Omega_apr[i, j] <- residual_variances_ar[i]  # Keep diagonal elements unchanged
    }
  }
}


det(Omega_apr)


H <- 12
T <- nrow(yields)
N <- ncol(yields)
W <- 108

Y_list <- vector("list", length = H)
for (h in 1:H) {
  matrices <- vector("list", length = T - W - h + 1) 
  for (t in 1:(T - W - h + 1)) {
    start_index <- t + 1
    end_index <- t + W - 1
    matrices[[t]] <- yields[start_index:end_index, ]
  }
    Y_list[[h]] <- matrices
}

X_list <- vector("list", length = H)
for (h in 1:H) {
  matrices <- vector("list", length = T - W - h + 1)
  
  for (t in 1:(T - W - h + 1)) {
    start_index <- t
    end_index <- t + W - 2
    matrices[[t]] <- yields[start_index:end_index, ]
  }  
  X_list[[h]] <- matrices
}

# Initialize a list to store matrices
Psi_apt_h1_list <- vector("list", length = (T - W))

Phi_1apr <- diag(0.99, N)

X_list_h1<-X_list[[1]]
Y_list_h1<-Y_list[[1]]

# Perform the matrix calculations
for (t in 1:(T - W)) {
  # Calculate intermediate matrices
  intermediate_matrix1_h1 <- solve(solve(Omega_apr) + t(X_list_h1[[t]]) %*% as.matrix(X_list_h1[[t]]))
  intermediate_matrix2_h1 <- solve(Omega_apr) %*% Phi_1apr + t(X_list_h1[[t]]) %*% as.matrix(Y_list_h1[[t]])
  
  # Calculate Psi_apt_h
  Psi_apt_h1_t <- intermediate_matrix1_h1 %*% intermediate_matrix2_h1
  
  # Store the result in the list
  Psi_apt_h1_list[[t]] <- Psi_apt_h1_t
}


E_yields_car <- matrix(nrow = (T - W), ncol = ncol(yields))
rownames(E_yields_car) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_car[t , ] <- as.matrix(Psi_apt_h1_list[[t]]) %*% t(yields[(t + 107), ])
}



E_yields_car_fin <- E_yields_car[, 1:(N - 1)] # t(W+1)=jan/15 até t(T)=jul/22; h(1-1)=M1 até h(H-1)=M120
yields_W_ini<-yields[W:(T - 1), 2:N] # t(W)=dez/14 até t(T-1)=jun/22; h(1)=M2 até h(H)=M121

mat_fin.repW<-t(as.data.frame(rep(as.data.frame(Maturities[1:120])[1],(T-W))))
mat_ini.repW<-t(as.data.frame(rep(as.data.frame(Maturities[2:121])[1],(T-W))))

rf.repW<-as.data.frame(rep(as.data.frame(yields[1:(T-W),1])[1],(N-1)))

E_mns.lnP_car_fin<-as.data.frame(E_yields_car_fin*mat_fin.repW)	#minus lnP
mns.lnP_W_ini<-as.data.frame(yields_W_ini*mat_ini.repW)

E_r1mo_car<- -E_mns.lnP_car_fin + mns.lnP_W_ini	#return rate for holding the bond for 1 month
E_rxs_car<- E_r1mo_car - rf.repW      # excess returns

r_xs_W <- r_xs[W:(nrow(r_xs)), ]

E_rxs_rw_W <- r_xs_W[1:(nrow(r_xs_W) - 1), ]
rxs_rw_W <- r_xs[2:(nrow(r_xs_W)), ]
MSPErw_W <- matrix(
  apply(rxs_rw_W - E_rxs_rw_W, 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(rxs_rw_W)
)

E_rxs_xphyp <- 0
MSPExphyp_W <- matrix(
  apply(r_xs_W^2, 2, mean),
  nrow = 1, ncol = ncol(r_xs_W)
)

MSPEcar_W <- matrix(
  apply(r_xs_W - E_rxs_car, 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(r_xs_W)
)

View(MSPEcar_W/MSPExphyp_W)


#prices<-cbind(exp(-rf),exp(-mns.lnP_ini))
#rownames(mat_fin.rep)<-rownames(yields_fin)
#colnames(mat_fin.rep)<-colnames(yields_fin)



#================================================================






optimal_p_values <- numeric(121)
residual_variances_ar <- numeric(121)
intercepts_ar <- numeric(121)


# Loop through each time series
for (i in 1:121) {
  time_series <- yields[1:108, i]
  
  # Initialize variables to store minimum BIC and optimal p
  min_bic <- Inf
  optimal_p <- 0
  
  # Try AR models with different values of p
  for (p in 1:10) {  # You can adjust the range of p as needed
    arima_model <- arima(time_series, order = c(p, 0, 0))
    bic <- AIC(arima_model, k = log(length(time_series)))
    
    # Update optimal p if current model has lower BIC
    if (bic < min_bic) {
      min_bic <- bic
      optimal_p <- p
    }
  }
  
  final_arima_model <- arima(time_series, order = c(optimal_p, 0, 0))
  residual_variances_ar[i] <- var(resid(final_arima_model))
  intercepts_ar[i] <- final_arima_model$coef[1]  # 1 corresponds to the intercept coefficient
  optimal_p_values[i] <- optimal_p
}

theta <- 0.1

Omega_apr <- matrix( nrow =  length(residual_variances_ar), ncol =  length(residual_variances_ar))
for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
  }
}

Omega_apr <- matrix( nrow = length(residual_variances_ar), ncol = length(residual_variances_ar))

for (i in 1:length(residual_variances_ar)) {
  for (j in 1:length(residual_variances_ar)) {
    if (i != j) {
      Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
    } else {
      Omega_apr[i, j] <- residual_variances_ar[i]  # Keep diagonal elements unchanged
    }
  }
}


det(Omega_apr)


T <- nrow(yields)
N <- ncol(yields)
W <- 108

Y_list <- vector("list", length = T - W)

for (t in 1:(T - W)) {
  start_index <- t + 1
  end_index <- t + W - 1
  Y_list[[t]] <- yields[start_index:end_index, ]
}

for (t in 1:(T - W)) {
  Y_list[[t]] <- yields[(t + 1):(t + W - 1), ]
}

Y_list_h1 <- lapply(1:(T - W), function(t) yields[(t + 1):(t + W - 1), ])
X_list_h1 <- lapply(1:(T - W), function(t) yields[(t):(t + W - 2), ])

# Initialize a list to store matrices
Psi_apt_h1_list <- vector("list", length = (T - W))

Phi_1apr <- diag(0.99, N)

# Perform the matrix calculations
for (t in 1:(T - W)) {
  # Calculate intermediate matrices
  intermediate_matrix1_h1 <- solve(solve(Omega_apr) + t(X_list_h1[[t]]) %*% as.matrix(X_list_h1[[t]]))
  intermediate_matrix2_h1 <- solve(Omega_apr) %*% Phi_1apr + t(X_list_h1[[t]]) %*% as.matrix(Y_list_h1[[t]])
  
  # Calculate Psi_apt_h
  Psi_apt_h1_t <- intermediate_matrix1_h1 %*% intermediate_matrix2_h1
  
  # Store the result in the list
  Psi_apt_h1_list[[t]] <- Psi_apt_h1_t
}


E_yields_car <- matrix(nrow = (T - W), ncol = ncol(yields))
rownames(E_yields_car) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_car[t , ] <- as.matrix(Psi_apt_h1_list[[t]]) %*% t(yields[(t + 107), ])
}



E_yields_car_fin <- E_yields_car[, 1:(N - 1)] # t(W+1)=jan/15 até t(T)=jul/22; h(1-1)=M1 até h(H-1)=M120
yields_W_ini<-yields[W:(T - 1), 2:N] # t(W)=dez/14 até t(T-1)=jun/22; h(1)=M2 até h(H)=M121

mat_fin.repW<-t(as.data.frame(rep(as.data.frame(Maturities[1:120])[1],(T-W))))
mat_ini.repW<-t(as.data.frame(rep(as.data.frame(Maturities[2:121])[1],(T-W))))

rf.repW<-as.data.frame(rep(as.data.frame(yields[1:(T-W),1])[1],(N-1)))

E_mns.lnP_car_fin<-as.data.frame(E_yields_car_fin*mat_fin.repW)	#minus lnP
mns.lnP_W_ini<-as.data.frame(yields_W_ini*mat_ini.repW)

E_r1mo_car<- -E_mns.lnP_car_fin + mns.lnP_W_ini	#return rate for holding the bond for 1 month
E_rxs_car<- E_r1mo_car - rf.repW      # excess returns

r_xs_W <- r_xs[W:(nrow(r_xs)), ]

E_rxs_rw_W <- r_xs_W[1:(nrow(r_xs_W) - 1), ]
rxs_rw_W <- r_xs[2:(nrow(r_xs_W)), ]
MSPErw_W <- matrix(
  apply(rxs_rw_W - E_rxs_rw_W, 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(rxs_rw_W)
)

E_rxs_xphyp <- 0
MSPExphyp_W <- matrix(
  apply(r_xs_W^2, 2, mean),
  nrow = 1, ncol = ncol(r_xs_W)
)

MSPEcar_W <- matrix(
  apply(rxs_rw_W - E_rxs_car[2:(nrow(r_xs_W)), ], 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(r_xs_W)
)


View(MSPEcar_W/MSPExphyp_W)


#prices<-cbind(exp(-rf),exp(-mns.lnP_ini))
#rownames(mat_fin.rep)<-rownames(yields_fin)
#colnames(mat_fin.rep)<-colnames(yields_fin)





#==============================-----ROLLING WINDOW = 108, H=1 in whole code, ar with fixed 108 window, NO INTERCEPT------============================================================


T <- nrow(yields)
N <- ncol(yields)
W <- 108

optimal_p_values <- numeric(121)
residual_variances_ar <- numeric(121)
intercepts_ar <- numeric(121)


# Loop through each time series
for (i in 1:121) {
  time_series <- yields[1:W, i]
  
  # Initialize variables to store minimum BIC and optimal p
  min_bic <- Inf
  optimal_p <- 0
  
  # Try AR models with different values of p
  for (p in 1:10) {  # You can adjust the range of p as needed
    arima_model <- arima(time_series, order = c(p, 0, 0))
    bic <- AIC(arima_model, k = log(length(time_series)))
    
    # Update optimal p if current model has lower BIC
    if (bic < min_bic) {
      min_bic <- bic
      optimal_p <- p
    }
  }
  
  final_arima_model <- arima(time_series, order = c(optimal_p, 0, 0))
  residual_variances_ar[i] <- var(resid(final_arima_model))
  intercepts_ar[i] <- final_arima_model$coef[1]  # 1 corresponds to the intercept coefficient
  optimal_p_values[i] <- optimal_p
}

theta <- 0.00001

  Omega_apr <- matrix( nrow = length(residual_variances_ar), ncol = length(residual_variances_ar))
  for (i in 1:length(residual_variances_ar)) {
    for (j in 1:length(residual_variances_ar)) {
      if (i != j) {
        Omega_apr[i, j] <- theta * residual_variances_ar[i] / residual_variances_ar[j]
      } else {
        Omega_apr[i, j] <- residual_variances_ar[i]  # Keep diagonal elements unchanged
      }
    }
  }



Y_list_h1 <- lapply(1:(T - W), function(t) yields[(t + 1):(t + W - 1), ])
X_list_h1 <- lapply(1:(T - W), function(t) yields[(t):(t + W - 2), ])

Psi_apt_h1_list <- vector("list", length = (T - W))

Phi_1apr <- diag(0.99, N)

# Psi a posteriori
for (t in 1:(T - W)) {
  intermediate_matrix1_h1 <- solve(solve(Omega_apr) + t(X_list_h1[[t]]) %*% as.matrix(X_list_h1[[t]]))
  intermediate_matrix2_h1 <- solve(Omega_apr) %*% Phi_1apr + t(X_list_h1[[t]]) %*% as.matrix(Y_list_h1[[t]])
  Psi_apt_h1_t <- intermediate_matrix1_h1 %*% intermediate_matrix2_h1
  Psi_apt_h1_list[[t]] <- Psi_apt_h1_t
}

E_yields_car <- matrix(nrow = (T - W), ncol = ncol(yields))
rownames(E_yields_car) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_car[t , ] <- as.matrix(Psi_apt_h1_list[[t]]) %*% t(yields[(t + W - 1), ])
}

yields_T0 <- yields[(W + 1):T,]

MSFE_car <- numeric(ncol(E_yields_car))
for (i in 1:ncol(E_yields_car)) {
  MSFE_car[i] <- (sum(E_yields_car[,i] - yields_T0[,i])^2)/(T - W)
}

E_yields_rw <- yields[(W):(T - 1),]
rownames(E_yields_rw) <- rownames(yields[(W + 1):T,])

MSFE_rw <- matrix(nrow = 1, ncol = ncol(E_yields_car))
for (i in 1:ncol(E_yields_car)) {
    MSFE_rw[,i] <- (sum(E_yields_rw[,i] - yields_T0[,i])^2)/(T - W)
}

# VAR
Psi_VAR_h1_list <- vector("list", length = (T - W))

for (t in 1:(T - W)) {
  intermediate_matrix1_h1 <- solve(t(X_list_h1[[t]]) %*% as.matrix(X_list_h1[[t]]))
  intermediate_matrix2_h1 <- t(X_list_h1[[t]]) %*% as.matrix(Y_list_h1[[t]])
  Psi_VAR_h1_t <- intermediate_matrix1_h1 %*% intermediate_matrix2_h1
  Psi_VAR_h1_list[[t]] <- Psi_VAR_h1_t
}

E_yields_VAR <- matrix(nrow = (T - W), ncol = ncol(yields))
rownames(E_yields_VAR) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_VAR[t , ] <- as.matrix(Psi_VAR_h1_list[[t]]) %*% t(yields[(t + W - 1), ])
}

MSFE_VAR <- numeric(ncol(E_yields_car))
for (i in 1:ncol(E_yields_car)) {
  MSFE_VAR[i] <- (sum(E_yields_VAR[,i] - yields_T0[,i])^2)/(T - W)
}



E_yields_car_fin <- E_yields_car[, 1:(N - 1)] # t(W+1)=jan/15 até t(T)=jul/22; h(1-1)=M1 até h(H-1)=M120
yields_W_ini<-yields[W:(T - 1), 2:N] # t(W)=dez/14 até t(T-1)=jun/22; h(1)=M2 até h(H)=M121

mat_fin.repW<-t(as.data.frame(rep(as.data.frame(Maturities[1:120])[1],(T-W))))
mat_ini.repW<-t(as.data.frame(rep(as.data.frame(Maturities[2:121])[1],(T-W))))

rf.repW<-as.data.frame(rep(as.data.frame(yields[1:(T-W),1])[1],(N-1)))

E_mns.lnP_car_fin<-as.data.frame(E_yields_car_fin*mat_fin.repW)	#minus lnP
mns.lnP_W_ini<-as.data.frame(yields_W_ini*mat_ini.repW)

E_r1mo_car<- -E_mns.lnP_car_fin + mns.lnP_W_ini	#return rate for holding the bond for 1 month
E_rxs_car<- E_r1mo_car - rf.repW      # excess returns

r_xs_W <- r_xs[W:(nrow(r_xs)), ]


MSPEcar_W <- matrix(
  apply(rxs_rw_W - E_rxs_car[2:(nrow(r_xs_W)), ], 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(r_xs_W)
)

E_rxs_rw_W <- r_xs_W[1:(nrow(r_xs_W) - 1), ]
rxs_rw_W <- r_xs[2:(nrow(r_xs_W)), ]
MSPErw_W <- matrix(
  apply(rxs_rw_W - E_rxs_rw_W, 2, function(col) mean(col^2)),
  nrow = 1, ncol = ncol(rxs_rw_W)
)

E_rxs_xphyp <- matrix(0,
MSPExphyp_W <- matrix(
  apply(r_xs_W^2, 2, mean),
  nrow = 1, ncol = ncol(r_xs_W)
)





#==============================-----FIXED WINDOW = W, H=1 in whole code, NO INTERCEPT, n=3 ------============================================================

T <- nrow(yields)
N <- ncol(yields)
W <- 108
theta_ij <- 0.00001
theta_ii <- 0.001

#----1) matrix Psi.prior = [Phi_0.prior Phi_1.prior]'

#----1.1) matrix Phi_0.prior

ar6 <- arima(yields[1:W, i], order = c(6, 0, 0))

Phi_0.prior <- numeric(N)
Phi_0.prior <- ar6$coef[1] #intercepts

#----1.2) matrix Phi_1.prior

Phi_1.prior <- diag(0.99, N)

Psi.prior <- cbind(Phi_0.prior, Phi_1.prior)


#----2) matrix Omega.prior

residual_variances_ar <- numeric(121)
residual_variances_ar[i] <- var(resid(ar6))

  Omega.prior <- matrix( nrow = N, ncol = N)
  for (i in 1:N) {
    for (j in 1:N) {
      if (i != j) {
        Omega.prior[i, j] <- theta_ij * residual_variances_ar[i] / residual_variances_ar[j]
      } else {
        Omega.prior[i, j] <- theta_ii
      }
    }
  }

Sigma <- diag(residual_variances_ar)

#----3) matrices X and Y

Y <-  yields[2:W, ]

Y_ <-  yields[1:(W - 1), ]
X_intercept <- matrix(1, ncol = 1, nrow = (W-1))
X <- cbind(X_intercept,Y_)


#----4) Psi.posterior

Psi.posterior <- solve(solve(Omega.prior) + t(X) %*% X) %*% (solve(Omega.prior) %*% Psi.prior + t(X) %*% (Y))

#----5) BVAR estimation

E_yields_car <- matrix(nrow = (T - W), ncol = N)
rownames(E_yields_car) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_car[t , ] <- as.matrix(yields[(t + W - 1), ]) %*%  Psi.posterior
}

#----6) MSFE Carriero

yields_T0 <- yields[(W + 1):T,]

MSFE_car <- numeric(N)
for (i in 1:N) {
  MSFE_car[i] <- (sum(E_yields_car[,i] - yields_T0[,i])^2)/(T - W)
}

#----7) MSFE Random Walk

E_yields_rw <- yields[(W):(T - 1),]
rownames(E_yields_rw) <- rownames(yields[(W + 1):T,])

MSFE_rw <- matrix(nrow = 1, ncol = ncol(E_yields_car))
for (i in 1:ncol(E_yields_car)) {
    MSFE_rw[,i] <- (sum(E_yields_rw[,i] - yields_T0[,i])^2)/(T - W)
}

#----8) MSFE AR




#----9) MSFE VAR

Psi_VAR_h1 <- solve(t(X_W_h1_intercept[,1:12]) %*% as.matrix(X_W_h1_intercept[,1:12])) %*% ( t(X_W_h1_intercept[,1:12]) %*% as.matrix(Y_W_h1[,1:12]))


Psi_VAR_h1_list <- vector("list", length = (T - W))

for (i in 1:N) {
  XtXinv <- solve(t(X_W_h1[,i]) %*% as.matrix(X_W_h1[,i]))
  XtY <- t(X_W_h1[,i]) %*% as.matrix(Y_W_h1[,i])
  Psi_VAR_h1_t <- XtXinv %*% XtY
  Psi_VAR_h1_list[[t]] <- Psi_VAR_h1_t
}

E_yields_VAR <- matrix(nrow = (T - W), ncol = ncol(yields))
rownames(E_yields_VAR) <- rownames(yields[(W + 1):T,])
for (t in 1:(T - W)) {
    E_yields_VAR[t , ] <- as.matrix(Psi_VAR_h1_list[[t]]) %*% t(yields[(t + W - 1), ])
}

MSFE_VAR <- numeric(ncol(E_yields_car))
for (i in 1:ncol(E_yields_car)) {
  MSFE_VAR[i] <- (sum(E_yields_VAR[,i] - yields_T0[,i])^2)/(T - W)
}



